<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>MaGent Blog</title>
        <link>https://loopyasa.github.io/</link>
        <description>Recent content on MaGent Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 08 Dec 2021 20:02:44 +0800</lastBuildDate><atom:link href="https://loopyasa.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Vue动态创建全局组件</title>
        <link>https://loopyasa.github.io/p/vue%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6/</link>
        <pubDate>Wed, 08 Dec 2021 20:02:44 +0800</pubDate>
        
        <guid>https://loopyasa.github.io/p/vue%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6/</guid>
        <description>&lt;img src="https://loopyasa.github.io/post/six/1.png" alt="Featured image of post Vue动态创建全局组件" /&gt;&lt;h1 id=&#34;vue动态创建全局组件&#34;&gt;Vue动态创建全局组件&lt;/h1&gt;
&lt;h2 id=&#34;创建全局组件&#34;&gt;创建全局组件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这是我准备的组件目录结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/six/2.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/six/2.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建功能组件HelloWorld.vue，组件功能很简单，就是类似弹出框的功能&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;v-if&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;=&amp;#34;isShow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;HelloWorld&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Welcome to Your Vue.js App&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;isShow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建HelloWorld_com.js&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;引入Vue与功能组件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Vue&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Hellow&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;./HelloWorld.vue&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成构造器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HellowConstructor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hellow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;封装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;showHello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_dom&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HellowConstructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 生成DOM节点
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 创建的功能组件中的msg
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;nx&#34;&gt;isShow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 创建的功能组件中的isShow，控制显隐式
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

    &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_dom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;$el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 将创建的DOM挂载到body
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_dom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isShow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 设置显隐式时间
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局组件，挂载到Vue的原型，并导出&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;helloReg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;$showHello&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;showHello&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;helloReg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在main.js中引入并全局使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;showHellow&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;./components/HelloWorld_com/HelloWorld_com&amp;#39;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;showHellow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用全局组件&#34;&gt;使用全局组件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我是在app中直接使用 (因为已经绑在Vue原型上了，所以直接this.$XXX传入需要的参数使用)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;showHello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;点击&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;router&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/template&amp;gt;&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;App&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;showHello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;$showHello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello,&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;效果图&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/six/3.gif&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/six/3.gif&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>取色器</title>
        <link>https://loopyasa.github.io/p/%E5%8F%96%E8%89%B2%E5%99%A8/</link>
        <pubDate>Wed, 08 Dec 2021 18:45:30 +0800</pubDate>
        
        <guid>https://loopyasa.github.io/p/%E5%8F%96%E8%89%B2%E5%99%A8/</guid>
        <description>&lt;h1 id=&#34;fork一个取色器&#34;&gt;Fork一个取色器&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;URL&lt;!-- raw HTML omitted --&gt;:&lt;a class=&#34;link&#34; href=&#34;https://flatuicolors.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flat UI Colors 2 - 14 Color Palettes, 280 colors 🎨&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在UI编写的时候经常会用到取色，尤其是自己这种没有审美观的人选色的时候更是拿不定手，这个网址里的颜色会有一种很清晰明了的感觉。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://i.loli.net/2020/09/14/lXkGqLsJ5BIT6bf.png&#34; &gt;
		&lt;img src=&#34;https://i.loli.net/2020/09/14/lXkGqLsJ5BIT6bf.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;avatar&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;avatar&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点进去之后是这样的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://i.loli.net/2020/09/14/OH6VD9yF2strfZM.png&#34; &gt;
		&lt;img src=&#34;https://i.loli.net/2020/09/14/OH6VD9yF2strfZM.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;avatar&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;avatar&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后点击需要的颜色就可以了。也可以切换取色的方式:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://i.loli.net/2020/09/14/nT6QHOFDqyPozef.png&#34; &gt;
		&lt;img src=&#34;https://i.loli.net/2020/09/14/nT6QHOFDqyPozef.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;avater&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;avater&lt;/figcaption&gt;
	
&lt;/figure&gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;还有一个值得一提的功能,网站底部的url里有很多好东西，比如很多人投的UI设计图，如果觉得自己审美不行又有人帮忙但还是想设计一个好看的UI的话不妨去逛逛吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://i.loli.net/2020/09/14/lXkGqLsJ5BIT6bf.png&#34; &gt;
		&lt;img src=&#34;https://i.loli.net/2020/09/14/lXkGqLsJ5BIT6bf.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;avatar&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;avatar&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Vue生命周期执行流程</title>
        <link>https://loopyasa.github.io/p/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</link>
        <pubDate>Wed, 08 Dec 2021 13:10:44 +0800</pubDate>
        
        <guid>https://loopyasa.github.io/p/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</guid>
        <description>&lt;img src="https://loopyasa.github.io/post/four/1.png" alt="Featured image of post Vue生命周期执行流程" /&gt;&lt;h1 id=&#34;vue生命周期执行流程&#34;&gt;Vue生命周期执行流程&lt;/h1&gt;
&lt;h2 id=&#34;vue实例的生命周期&#34;&gt;Vue实例的生命周期&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;挂载&lt;/strong&gt;:  初始化相关属性，例如: &lt;code&gt;watch&lt;/code&gt;、&lt;code&gt;method&lt;/code&gt;属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;beforeCreate&lt;/li&gt;
&lt;li&gt;created&lt;/li&gt;
&lt;li&gt;beforeMount&lt;/li&gt;
&lt;li&gt;mounted&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;: 元素或组件的变更操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;beforeUpdate&lt;/li&gt;
&lt;li&gt;updated&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;销毁&lt;/strong&gt;: 销毁相关属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;beforeDestroy&lt;/li&gt;
&lt;li&gt;destroyed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;挂载&#34;&gt;挂载&lt;/h3&gt;
&lt;h4 id=&#34;第一步&#34;&gt;第一步&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/four/2.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/four/2.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;beforeCreate&lt;/strong&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Vue&lt;/code&gt;实例初始化之后，以及事件初始化，以及组件的父子关系确定后执行该钩子函数，一般在开发中很少使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;created&lt;/strong&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在调用该方法之前，初始化会被使用到的状态，状态包括&lt;code&gt;props&lt;/code&gt;,&lt;code&gt;methods&lt;/code&gt;,&lt;code&gt;data&lt;/code&gt;,&lt;code&gt;computed&lt;/code&gt;,&lt;code&gt;watch&lt;/code&gt;而且会实现对&lt;code&gt;data&lt;/code&gt;中属性的监听，也就是在&lt;code&gt;created&lt;/code&gt;的时候数据已经和&lt;code&gt;data&lt;/code&gt;属性进行了绑定。(放在&lt;code&gt;data&lt;/code&gt;中的属性当值发生改变的时候，视图也会改变)。同时也会对传递到组件中的数据进行校验。所以在执行&lt;code&gt;created&lt;/code&gt;的时候，所有的状态都初始化完成，我们也完全可以在该阶段发送异步的&lt;code&gt;ajax&lt;/code&gt;请求，获取数据。但是，在&lt;code&gt;created&lt;/code&gt;方法中，是无法获取到对应的的&lt;code&gt;$el&lt;/code&gt;选项,也就是无法获取&lt;code&gt;Dom&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/four/3.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/four/3.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;第二步&#34;&gt;第二步&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;判断 el&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;created&lt;/code&gt;方法执行完毕后，下面会判断对象中有没有&lt;code&gt;el&lt;/code&gt;选项。如果有，继续执行下面的流程，也就是判断是否有&lt;code&gt;template&lt;/code&gt;选项，如果没有&lt;code&gt;el&lt;/code&gt;选项，则停止整个生命周期的流程，直到执行了&lt;code&gt;vm.$mount(el)&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;el&lt;/code&gt;选项去掉了，执行完&lt;code&gt;created&lt;/code&gt;方法后，整个流程就停止了。不添加&lt;code&gt;el&lt;/code&gt;选项，但是手动执行&lt;code&gt;vm.$mount(el)&lt;/code&gt;,也能够使暂停的生命周期进行下去。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;判断 template&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果&lt;code&gt;Vue&lt;/code&gt;实例对象中有&lt;code&gt;template&lt;/code&gt;参数选项，则将其作为模板编译成&lt;code&gt;render&lt;/code&gt;函数，来完成渲染。&lt;/li&gt;
&lt;li&gt;如果没有&lt;code&gt;template&lt;/code&gt;参数选项，则将外部的&lt;code&gt;HTML&lt;/code&gt;作为模板编译（&lt;code&gt;template&lt;/code&gt;），也就是说，&lt;code&gt;template&lt;/code&gt;参数选项的优先级要比外部的&lt;code&gt;HTML&lt;/code&gt;高。&lt;/li&gt;
&lt;li&gt;如果第一条,第二条件都不具备，则报错。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Vue&lt;/code&gt;需要通过&lt;code&gt;el&lt;/code&gt;的“选择器”找到对应的&lt;code&gt;template&lt;/code&gt;.也就是说，&lt;code&gt;Vue&lt;/code&gt;首先通过&lt;code&gt;el&lt;/code&gt;参数去查找对应的&lt;code&gt;template&lt;/code&gt;.如果没有找到&lt;code&gt;template&lt;/code&gt;参数，则到外部&lt;code&gt;HTML&lt;/code&gt;中查找，找到后将模板编译成&lt;code&gt;render&lt;/code&gt;。函数（&lt;code&gt;Vue&lt;/code&gt;的编译实际上就是指&lt;code&gt;Vue&lt;/code&gt;把模板编译成&lt;code&gt;render&lt;/code&gt;函数的过程）。还有一点需要注意（&lt;code&gt;template&lt;/code&gt;参数的优先级比外部&lt;code&gt;HTML&lt;/code&gt;的优先级要高。）如果同时有template模板与外部的html，则会优先渲染template里面的数据。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;第三步&#34;&gt;第三步&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/four/4.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/four/4.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;beforeMount&lt;/strong&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虚拟&lt;code&gt;DOM&lt;/code&gt;已经创建完成，马上就要渲染了，在这里可以更改&lt;code&gt;data&lt;/code&gt;中的数据，不会触发&lt;code&gt;updated&lt;/code&gt;, 其实在&lt;code&gt;created&lt;/code&gt;中也是可以更改数据，也不会触发&lt;code&gt;updated&lt;/code&gt;函数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;mounted&lt;/strong&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;执行&lt;code&gt;mounted&lt;/code&gt;的时候，可以看到真实的数据。同时整个组件内容已经挂载到页面中了，数据以及真实&lt;code&gt;DOM&lt;/code&gt;都已经处理好了，可以在这里操作真实&lt;code&gt;DOM&lt;/code&gt;了，也就是在&lt;code&gt;mounted&lt;/code&gt;的时候，页面已经被渲染完毕了，在这个钩子函数中，我们可以去发送&lt;code&gt;ajax&lt;/code&gt;请求。&lt;/p&gt;
&lt;h3 id=&#34;更新&#34;&gt;更新&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/four/5.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/four/5.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;beforeUpdate&lt;/strong&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;beforeUpdate&lt;/code&gt;之后有一个非常重要的操作就是虚拟&lt;code&gt;DOM&lt;/code&gt;会重新构建，也就是新构建的虚拟&lt;code&gt;DOM&lt;/code&gt;与上一次的虚拟&lt;code&gt;DOM&lt;/code&gt;树利用&lt;code&gt;diff&lt;/code&gt;算法进行对比之后重新渲染。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;表示数据已经更新完成，&lt;code&gt;dom&lt;/code&gt;也重新&lt;code&gt;render&lt;/code&gt;完成。&lt;/p&gt;
&lt;h3 id=&#34;销毁&#34;&gt;销毁&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/four/6.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/four/6.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;beforeDestroy&lt;/strong&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个钩子函数在实例销毁前调用，在这一步，实例仍然可用。在该方法中，可以做一些清理的工作，例如：清除定时器等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;destroyed&lt;/strong&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Vue&lt;/code&gt;实例已经被销毁，所有的事件监听器会被移除，所有的子实例也会被销毁&lt;/p&gt;
&lt;h2 id=&#34;vue生命周期全图&#34;&gt;Vue生命周期全图&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/four/7.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/four/7.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;beforeCreate&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在实例初始化之后，数据观测和事件配置之前被调用，此时组件的选项对象还未创建，el 和 data 并未初始化，因此无法访问methods， data， computed等上的方法和数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;created&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实例已经创建完成之后被调用，在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch/event事件回调，完成了data 数据的初始化，el没有。 然而，挂载阶段还没有开始, $el属性目前不可见，这是一个常用的生命周期，因为你可以调用methods中的方法，改变data中的数据，并且修改可以通过vue的响应式绑定体现在页面上，获取computed中的计算属性等等，通常我们可以在这里对实例进行预处理，也有一些童鞋喜欢在这里发ajax请求，值得注意的是，这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;beforeMount&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;挂载开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置： 编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意此时还没有挂在html到页面上。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;mounted&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;挂载开始后，也就是模板中的HTML渲染到HTML页面中，此时一般可以做一些ajax操作，mounted只会执行一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;beforeUpdate&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子中进一步地更改状态，不会触发附加地重渲染过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;updated&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在由于数据更改导致地虚拟DOM重新渲染和打补丁只会调用，调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作，然后在大多是情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环，该钩子在服务器端渲染期间不被调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;beforeDestroy&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在实例销毁之前调用，实例仍然完全可用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这一步还可以用this来获取实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般在这一步做一些重置的操作，比如清除掉组件中的定时器 和 监听的dom事件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;destroyed&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在实例销毁之后调用，调用后，所以的事件监听器会被移出，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/wueiwn/p/15238583.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/672e967e201c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考博客&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>React生命周期执行流程</title>
        <link>https://loopyasa.github.io/p/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</link>
        <pubDate>Tue, 07 Dec 2021 16:10:25 +0800</pubDate>
        
        <guid>https://loopyasa.github.io/p/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</guid>
        <description>&lt;img src="https://loopyasa.github.io/post/three/1.png" alt="Featured image of post React生命周期执行流程" /&gt;&lt;h1 id=&#34;react生命周期执行流程&#34;&gt;React生命周期执行流程&lt;/h1&gt;
&lt;h2 id=&#34;旧版本生命周期&#34;&gt;旧版本生命周期&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;初始化阶段&lt;/strong&gt;:  由ReactDOM.render() 触发&amp;mdash;&amp;ndash;初次渲染&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;constructor()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;componentWillMount()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;render()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;&lt;strong&gt;componentDidmount()&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;常用钩子，一般在这个钩子中做一些初始化的事，例如: 开启定时器、发送网络请求、订阅请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;更新阶段&lt;/strong&gt;:  由组件内部this.setState()或父组件render触发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;shouldComponentUpdate()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;componentWillUpdate()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;render()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;componentDidUpdate()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;卸载组件&lt;/strong&gt;: 由ReactDOM.unmountComponentAtNode()触发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;&lt;strong&gt;componentWillUmount()&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;常用钩子，一般在这个钩子中做一些收尾的事,例如:关闭定时器、取消订阅。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/three/3.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/three/3.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;新版本生命周期&#34;&gt;新版本生命周期&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;初始化阶段&lt;/strong&gt;: 由ReactDOM.render()触发&amp;mdash;&amp;ndash;初次渲染&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;constructor()&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;getDerivedStateFromPorps&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;render()&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;strong&gt;componentDidMount()&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用钩子，一般在这个钩子中做一些初始化的事，例如: 开启定时器、发送网络请求、订阅请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;更新阶段&lt;/strong&gt;: 由组件内部this.setState()或者父组件重新render触发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;getDerivedStateFromPorps()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;shouldComponentUpdate()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;render()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getSnapshotBeforeUpdate()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;componentDidUpdate()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;卸载组件&lt;/strong&gt;: 由ReactDOM.unmountComponentAtNode()触发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;strong&gt;componentWillUnmount()&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用钩子，一般在这个钩子中做一些收尾的事,例如:关闭定时器、取消订阅。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/three/2.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/three/2.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Vue项目中使用Tailwind CSS</title>
        <link>https://loopyasa.github.io/p/vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8tailwind-css/</link>
        <pubDate>Mon, 06 Dec 2021 23:06:19 +0800</pubDate>
        
        <guid>https://loopyasa.github.io/p/vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8tailwind-css/</guid>
        <description>&lt;img src="https://loopyasa.github.io/post/two/3.png" alt="Featured image of post Vue项目中使用Tailwind CSS" /&gt;&lt;h1 id=&#34;vue项目中使用tailwind-css&#34;&gt;Vue项目中使用Tailwind CSS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用npm安装Tailwind、PostCSS、Autoprefixer&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install -D tailwindcss postcss autoprefixer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化Tailwind和PostCSS的设定文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npx tailwind init -p&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置tailwind.config.js中的purge的值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;purge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;./index.html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;./src/**/*.{vue, js, ts, jsx ,tsx}&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;darkMode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// or &amp;#39;media&amp;#39; or &amp;#39;class&amp;#39;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;theme&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;variants&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在src目录下创建index.css，并使用@tailwind关键词载入三大部件&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/two/1.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/two/1.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在main.js载入index.css&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​       &lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/two/2.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/two/2.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用tailwindcss并测试，最后附上tailwindcss文档，方便查找需要样式&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.tailwindcss.cn/docs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.tailwindcss.cn/docs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>搭建个人博客</title>
        <link>https://loopyasa.github.io/p/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
        <pubDate>Sun, 05 Dec 2021 20:44:06 +0800</pubDate>
        
        <guid>https://loopyasa.github.io/p/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
        <description>&lt;img src="https://loopyasa.github.io/post/one/6.png" alt="Featured image of post 搭建个人博客" /&gt;&lt;h1 id=&#34;hugovercel搭建个人博客&#34;&gt;Hugo+Vercel搭建个人博客&lt;/h1&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;个人在搭建了博客后放在了github上，因为比较慢&lt;del&gt;懒&lt;/del&gt;，很长一段时间都闲置了，最近了解了Vercel并且部署了一个node后端小项目后决定将博客部署在Vercel上。&lt;/p&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hugo搭建博客部署在github上非常简单，大家搜一搜就行了，在这放个羊哥保姆级视频。&lt;/p&gt;






    


&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe src=&#34;https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV1q4411i7gL&#34;
            scrolling=&#34;no&#34;
            frameborder=&#34;no&#34;
            framespacing=&#34;0&#34;
            allowfullscreen=&#34;true&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vercel这边注册个账号就可以了，个人界面如下:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/one/1.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/one/1.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开始搭建&#34;&gt;开始搭建&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;点击界面上的New Porject&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/one/2.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/one/2.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;之后import自己仓库里的博客项目&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/one/3.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/one/3.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;再在这个界面输入自己的项目名字后点击create&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/one/4.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/one/4.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;在这一步会有个小坑，因为是用的Hugo框架所以我在这一步一开始选了Hugo然后部署出了错，后面选着默认的部署成功了，所以在这我选择默认的，大家就不知道会不会遇到啦。&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/one/5.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/one/5.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成功啦!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/one/6.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/one/6.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问试试看，&lt;!-- raw HTML omitted --&gt;Perfect!&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://loopyasa.github.io/post/one/7.png&#34; &gt;
		&lt;img src=&#34;https://loopyasa.github.io/post/one/7.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Hugo+Vercel还是很好用的&lt;del&gt;白嫖&lt;/del&gt;,访问速度相比github上也快了不少。在Hugo上还有一些自己的小坑&lt;del&gt;正常都觉得不是问题，太菜鸡了QAQ&lt;/del&gt;后面也会更新出来。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
