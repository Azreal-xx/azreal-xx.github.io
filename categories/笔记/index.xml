<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>笔记 on MaGent Blog</title>
    <link>https://loopyasa.github.io/categories/%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 笔记 on MaGent Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Jan 2022 16:33:06 +0800</lastBuildDate><atom:link href="https://loopyasa.github.io/categories/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>请求状态码</title>
      <link>https://loopyasa.github.io/p/%E8%AF%B7%E6%B1%82%E7%8A%B6%E6%80%81%E7%A0%81/</link>
      <pubDate>Tue, 04 Jan 2022 16:33:06 +0800</pubDate>
      
      <guid>https://loopyasa.github.io/p/%E8%AF%B7%E6%B1%82%E7%8A%B6%E6%80%81%E7%A0%81/</guid>
      <description>常见请求状态码 请求状态码 HTTP状态码表示客户端HTTP请求的返回结果、标记服务器端的处理是否正常或者是出现的错误，能够根据返回的状态码判断</description>
    </item>
    
    <item>
      <title>浏览器缓存机制</title>
      <link>https://loopyasa.github.io/p/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 04 Jan 2022 16:03:08 +0800</pubDate>
      
      <guid>https://loopyasa.github.io/p/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid>
      <description>浏览器缓存机制 强缓存 浏览器在加载资源时，会先根据本地缓存资源的 header 中的信息判断是否命中强缓存，如果命中则直接使用缓存中的资源不会再向服务器发送</description>
    </item>
    
    <item>
      <title>vue-router传参</title>
      <link>https://loopyasa.github.io/p/vue-router%E4%BC%A0%E5%8F%82/</link>
      <pubDate>Sun, 02 Jan 2022 17:20:46 +0800</pubDate>
      
      <guid>https://loopyasa.github.io/p/vue-router%E4%BC%A0%E5%8F%82/</guid>
      <description>vue-router传递参数的三种方式 Get方式 传递页面 &amp;lt;router-link :to=&amp;#34;{path:&amp;#39;/test&amp;#39;,query: { userId: 123,userName:&amp;#39;xia&amp;#39; }}&amp;#34;&amp;gt;&amp;lt;/router-link&amp;gt; &amp;lt;router-link :to=&amp;#34;{name:&amp;#39;test&amp;#39;,query: { userId: 123,userName:&amp;#39;xia&amp;#39; }}&amp;#34;&amp;gt;&amp;lt;/router-link&amp;gt; 接收页面 this.$route.query.userId // 123 this.$route.query.userName // xia url: http://localhost:8080/test?userId=123&amp;amp;userName=xia 这种方式传递参数，页面刷新后值不会消</description>
    </item>
    
    <item>
      <title>回流和重绘</title>
      <link>https://loopyasa.github.io/p/%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98/</link>
      <pubDate>Tue, 14 Dec 2021 10:28:11 +0800</pubDate>
      
      <guid>https://loopyasa.github.io/p/%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98/</guid>
      <description>回流和重绘 简介 在HTML中，每个元素都可以理解成一个盒子，在浏览器解析过程中，会涉及到回流与重绘。 回流: 布局引擎会根据各种样式计算每个盒子在</description>
    </item>
    
    <item>
      <title>TCP三次握手和四次挥手</title>
      <link>https://loopyasa.github.io/p/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</link>
      <pubDate>Mon, 13 Dec 2021 13:00:05 +0800</pubDate>
      
      <guid>https://loopyasa.github.io/p/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</guid>
      <description>TCP三次握手和四次挥手 TCP连接 建立一个TCP连接时，需要客户端和服务端总共发送3个包以确认连接的建立。在socket编程中，这一过程由客</description>
    </item>
    
    <item>
      <title>var 、 let 、 const</title>
      <link>https://loopyasa.github.io/p/var-let-const/</link>
      <pubDate>Sun, 12 Dec 2021 19:45:26 +0800</pubDate>
      
      <guid>https://loopyasa.github.io/p/var-let-const/</guid>
      <description>var 、 let 、 const的区别 var 在ES5中，顶层对象的属性和全局变量是等价的，用var声明的变量既是全局变量，也是顶层变量 注意：顶层对象，在浏览器</description>
    </item>
    
    <item>
      <title>JS中的this</title>
      <link>https://loopyasa.github.io/p/js%E4%B8%AD%E7%9A%84this/</link>
      <pubDate>Fri, 10 Dec 2021 12:30:07 +0800</pubDate>
      
      <guid>https://loopyasa.github.io/p/js%E4%B8%AD%E7%9A%84this/</guid>
      <description>JS中的this 定义 函数的 this 关键字在 JavaScript 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别。在绝大多数情况下，函数的调用方式决定</description>
    </item>
    
    <item>
      <title>Cookie  localStorage  sessionStorage</title>
      <link>https://loopyasa.github.io/p/cookie-localstorage-sessionstorage/</link>
      <pubDate>Thu, 09 Dec 2021 22:41:52 +0800</pubDate>
      
      <guid>https://loopyasa.github.io/p/cookie-localstorage-sessionstorage/</guid>
      <description>Cookie localStorage sessionStorage Cookie Cookie 是一些数据, 存储于你电脑上的文本文件中。当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息。Cookie 的作用</description>
    </item>
    
    <item>
      <title>Vue中的Ajax</title>
      <link>https://loopyasa.github.io/p/vue%E4%B8%AD%E7%9A%84ajax/</link>
      <pubDate>Thu, 09 Dec 2021 10:57:56 +0800</pubDate>
      
      <guid>https://loopyasa.github.io/p/vue%E4%B8%AD%E7%9A%84ajax/</guid>
      <description>Vue中的Ajax应该在放在哪个钩子函数中 前言 网上看了许多的相关博客，问题范围较广具体很多都是要看业务需求。异步函数并不会阻塞vue生命周期</description>
    </item>
    
    <item>
      <title>Vue生命周期执行流程</title>
      <link>https://loopyasa.github.io/p/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Wed, 08 Dec 2021 13:10:44 +0800</pubDate>
      
      <guid>https://loopyasa.github.io/p/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</guid>
      <description>Vue生命周期执行流程 Vue实例的生命周期 挂载: 初始化相关属性，例如: watch、method属性 beforeCreate created beforeMount mounted 更新: 元素或组件的变更操作 beforeUpdate updated 销毁</description>
    </item>
    
    <item>
      <title>React生命周期执行流程</title>
      <link>https://loopyasa.github.io/p/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Tue, 07 Dec 2021 16:10:25 +0800</pubDate>
      
      <guid>https://loopyasa.github.io/p/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</guid>
      <description>React生命周期执行流程 旧版本生命周期 constructor() constructor()中完成了React数据的初始化，它接受两个参数：props和contex</description>
    </item>
    
  </channel>
</rss>
